buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'
  }
}

plugins {
  id 'java'
  id 'war'
  id 'org.springframework.boot' version '1.5.6.RELEASE'
  id 'org.jetbrains.kotlin.jvm' version '1.1.4'
}
apply plugin: 'com.google.cloud.tools.appengine'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  jcenter()
  maven {
    url 'https://repo.eclipse.org/content/groups/releases/'
  }
}

dependencies {
  compile 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:4.8.0.201706111038-r'
  compile 'com.google.code.gson:gson'

  compile 'org.jetbrains.kotlin:kotlin-stdlib'

  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'

  compile 'com.google.appengine:appengine-api-1.0-sdk:+'
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

  testCompile 'com.google.appengine:appengine-testing:+'
  testCompile 'com.google.appengine:appengine-api-stubs:+'
  testCompile 'com.google.appengine:appengine-tools-sdk:+'
}

configurations.all {
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  exclude group: 'org.slf4j', module: 'jul-to-slf4j'
}

bootRepackage.enabled = false
findMainClass.enabled = false

appengine {
  deploy {
    project = 'gradleupdate'
  }
  run {
    environment = [SPRING_THYMELEAF_CACHE: 'false'] + file('.env').withReader {
      final properties = new Properties()
      properties.load(it)
      properties
    }
    jvmFlags = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
  }
}

appengineStage.doLast {
  final envProperties = file('.env').withReader {
    final properties = new Properties()
    properties.load(it)
    properties
  }

  final appengineWebXml = file("${appengine.stage.stagingDirectory}/WEB-INF/appengine-web.xml")
  final parser = new XmlParser()
  final rootNode = parser.parse(appengineWebXml)
  final envVariablesNode = rootNode.'env-variables'.first() ?: rootNode.appendNode('env-variables')
  envProperties.each { k, v ->
    envVariablesNode.appendNode('env-var', [name: k, value: v])
  }
  appengineWebXml.text = groovy.xml.XmlUtil.serialize(rootNode)
}

task explodeWar(type: Sync, overwrite: true) {
  with war
  into "$buildDir/exploded-${project.name}"
}
